export enum APP_LOGS_FN {
  suspendBasketClicked = "suspendBasketClicked",
  handleDissociateCashDrawer = "handleDissociateCashDrawer",
  prepareAdditionalItems = "prepareAdditionalItems",
  validatePouchPayloadBeforeSubmit = "validatePouchPayloadBeforeSubmit",
  submitPouchForAcceptance = "submitPouchForAcceptance",
  submitPouchForDispatch = "submitPouchForDispatch",
  useEffect = "useEffect",
  useRefreshTokens = "useRefreshTokens",
  registerDevice = "registerDevice",
  refreshDeviceTokensAsyncThunkfulfilled = "refreshDeviceTokensAsyncThunk.fulfilled",
  refreshUserTokensAsyncThunkfulfilled = "refreshUserTokensAsyncThunk.fulfilled",
  getNewToken = "getNewToken",
  getIdToken = "getIdToken",
  getUserIdToken = "getUserIdToken",
  getDeviceToken = "getDeviceToken",
  deviceTokenNotFound = "deviceTokenNotFound",
  useCheckBranchPermission = "useCheckBranchPermission",
  AuthRoutes = "AuthRoutes",
  primaryButton = "primaryButton",
  secondaryButtononPress = "secondaryButton.onPress",
  parseUserIdentities = "parseUserIdentities",
  associateCashDrawer = "associateCashDrawer",
  signOutRedirect = "SignOutRedirect",
  authRedirect = "AuthRedirect",
  refreshedTokens = "refreshedTokens",
}

export enum APP_LOGS_MSG {
  suspendNotAfterCommit = "suspend feature not available after commit entry",
  cashDrawerDisSuccess = "Cash drawer dissociated successfully",
  failDisCashDrawer = "failed to dissociate Cash drawer",
  additionalItemNotRec = "additionalItems not received in API response",
  invalidPayloadForPouchAcceptance = "invalid payload to process pouch acceptance",
  invalidPayloadForPouchDispatch = "invalid payload to process pouch dispatch",
  startedRefreshUserToken = "Started refresh user token",
  startedRefreshDeviceToken = "Started refresh device token",
  deviceTokenRefreshedSuccessFully = "Device token refreshed successfully",
  userTokenRefreshedSuccessFully = "User token refreshed successfully",
  deviceTokenNotFound = "Device token not found",
  userTokenNotFound = "User token not found or being load",
  fadCodeNotFound = "fadcode not found or being load",
  customSysRoleNotFound = "custom:SysRole not found in user token",
  userDoNotHavePermission = "User do not have permission to log on in this branch",
  failedToParseUser = "failed to parse user identity",
  cashDrawerAssociateSuccess = "Cash drawer associated successfully",
  refreshTokenFailed = "refreshedTokens failed",
}

export const APP_LOGS_VARS = {
  valueNotReceived: (value: string) => `${value} not received `,
  tokenNotFoundEndPoint: (url: string) => `Token not found for ${url} endpoint`,
  deviceCognitoLoggedIn: (deviceID: string) => `Device ${deviceID} logged in.`,
  branchPermissionFailedFadCode: (fadcode: string) =>
    `Branch permission check failed with ${fadcode}`,
  branchPermissionPassedFadCode: (fadcode: string) =>
    `Branch permission check passed successfully with ${fadcode}`,
  basketClosedFrom: (from: string) => `Basket closed from ${from}`,
  userLoggedOutFrom: (userName: string) => `User ${userName} logged out`,
  userLoggedIn: (clerkId: string) => `User ${clerkId} logged in`,
};
