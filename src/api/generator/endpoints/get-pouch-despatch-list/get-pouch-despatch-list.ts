/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * BBO Pouch Management Api
 * Replaces `pouch-management-api` Pouch Management API defining how to get and modify Pouch data
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  GetPouchDespatchListResponseResponse,
  BadRequestResponse,
  UnauthorizedResponse,
  ForbiddenResponse,
  FailureResponseResponse
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * This api is to get list of prepared pouches at a branch that will be used for Pouch Despatch Process.
 * @summary Get List of prepared of pouches
 */
export const useGetDespatchListHook = () => {
        const getDespatchList = useCustomInstance<GetPouchDespatchListResponseResponse>();

        return (
    
 signal?: AbortSignal
) => {
        return getDespatchList(
          {url: `/v1/despatch/list`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetDespatchListQueryKey = () => [`/v1/despatch/list`] as const;
  

    
export type GetDespatchListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDespatchListHook>>>>
export type GetDespatchListQueryError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

export const useGetDespatchList = <TData = Awaited<ReturnType<ReturnType<typeof useGetDespatchListHook>>>, TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDespatchListHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDespatchListQueryKey();

  const getDespatchList =  useGetDespatchListHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDespatchListHook>>>> = ({ signal }) => getDespatchList(signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetDespatchListHook>>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

