/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * BBO Pouch Management Api
 * Replaces `pouch-management-api` Pouch Management API defining how to get and modify Pouch data
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  GetPouchAcceptanceResponseResponse,
  NoContentResponse,
  BadRequestResponse,
  UnauthorizedResponse,
  ForbiddenResponse,
  FailureResponseResponse
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * This Api is to validate the expected pouch from same or different branches as it also supports cross branch functionality i.e, user can get the expected pouches from other branches as well. This will be used in Pouch acceptance process.
 * @summary Validate expected pouch ID
 */
export const useGetAcceptanceValidateHook = () => {
        const getAcceptanceValidate = useCustomInstance<GetPouchAcceptanceResponseResponse | NoContentResponse>();

        return (
    pouchID: string,
 signal?: AbortSignal
) => {
        return getAcceptanceValidate(
          {url: `/v1/acceptance/validate/${pouchID}`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetAcceptanceValidateQueryKey = (pouchID: string,) => [`/v1/acceptance/validate/${pouchID}`] as const;
  

    
export type GetAcceptanceValidateQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceValidateHook>>>>
export type GetAcceptanceValidateQueryError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

export const useGetAcceptanceValidate = <TData = Awaited<ReturnType<ReturnType<typeof useGetAcceptanceValidateHook>>>, TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>>(
 pouchID: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceValidateHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAcceptanceValidateQueryKey(pouchID);

  const getAcceptanceValidate =  useGetAcceptanceValidateHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceValidateHook>>>> = ({ signal }) => getAcceptanceValidate(pouchID, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceValidateHook>>>, TError, TData>({ queryKey, queryFn, enabled: !!(pouchID), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

