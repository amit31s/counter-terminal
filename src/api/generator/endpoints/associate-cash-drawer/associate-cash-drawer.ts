/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * BBO Accounting Location Api
 * Accounting Location API defining how to get and modify Accounting Locations
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from 'react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  GetAssociationResponseResponse,
  BadRequestResponse,
  UnauthorizedResponse,
  ForbiddenResponse,
  FailureResponseResponse,
  AssociateCashDrawerBodyBody
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * Associate a Cash Drawer and Counter
 * @summary (From Counter) Associate a Cash Drawer and Counter
 */
export const useAssociateCashDrawerCounterHook = () => {
        const associateCashDrawerCounter = useCustomInstance<GetAssociationResponseResponse>();

        return (
    associateCashDrawerBodyBody: AssociateCashDrawerBodyBody,
 ) => {
        return associateCashDrawerCounter(
          {url: `/v1/association`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: associateCashDrawerBodyBody
    },
          );
        }
      }
    


    export type AssociateCashDrawerCounterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAssociateCashDrawerCounterHook>>>>
    export type AssociateCashDrawerCounterMutationBody = AssociateCashDrawerBodyBody
    export type AssociateCashDrawerCounterMutationError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

    export const useAssociateCashDrawerCounter = <TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAssociateCashDrawerCounterHook>>>, TError,{data: AssociateCashDrawerBodyBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const associateCashDrawerCounter =  useAssociateCashDrawerCounterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAssociateCashDrawerCounterHook>>>, {data: AssociateCashDrawerBodyBody}> = (props) => {
          const {data} = props ?? {};

          return  associateCashDrawerCounter(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof associateCashDrawerCounter>>, TError, {data: AssociateCashDrawerBodyBody}, TContext>(mutationFn, mutationOptions);
    }
    