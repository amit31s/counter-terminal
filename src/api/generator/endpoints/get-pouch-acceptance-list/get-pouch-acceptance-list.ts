/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * BBO Pouch Management Api
 * Replaces `pouch-management-api` Pouch Management API defining how to get and modify Pouch data
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  GetPouchAcceptanceListResponseResponse,
  BadRequestResponse,
  UnauthorizedResponse,
  ForbiddenResponse,
  FailureResponseResponse
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * This api to get the list of expected pouches in the branch.
 * @summary Get expected list of pouches in the branch
 */
export const useGetAcceptanceListHook = () => {
        const getAcceptanceList = useCustomInstance<GetPouchAcceptanceListResponseResponse>();

        return (
    
 signal?: AbortSignal
) => {
        return getAcceptanceList(
          {url: `/v1/acceptance/list`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetAcceptanceListQueryKey = () => [`/v1/acceptance/list`] as const;
  

    
export type GetAcceptanceListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceListHook>>>>
export type GetAcceptanceListQueryError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

export const useGetAcceptanceList = <TData = Awaited<ReturnType<ReturnType<typeof useGetAcceptanceListHook>>>, TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceListHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAcceptanceListQueryKey();

  const getAcceptanceList =  useGetAcceptanceListHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceListHook>>>> = ({ signal }) => getAcceptanceList(signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetAcceptanceListHook>>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

