/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Pouch Management Service
 * PO Counter Terminal
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PouchValidationForPreparedPouches,
  Error,
  ValidatePreparedPouchesParams
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * Validate Prepared Pouch Data
 * @summary This endpoint is used to valide prepared pouches whether exist or not
 */
export const useValidatePreparedPouchesHook = () => {
        const validatePreparedPouches = useCustomInstance<PouchValidationForPreparedPouches | void>();

        return (
    params: ValidatePreparedPouchesParams,
 signal?: AbortSignal
) => {
        return validatePreparedPouches(
          {url: `/pouch/poc/validate`, method: 'get',
        params, signal
    },
          );
        }
      }
    

export const getValidatePreparedPouchesQueryKey = (params: ValidatePreparedPouchesParams,) => [`/pouch/poc/validate`, ...(params ? [params]: [])];

    
export type ValidatePreparedPouchesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValidatePreparedPouchesHook>>>>
export type ValidatePreparedPouchesQueryError = ErrorType<Error>

export const useValidatePreparedPouches = <TData = Awaited<ReturnType<ReturnType<typeof useValidatePreparedPouchesHook>>>, TError = ErrorType<Error>>(
 params: ValidatePreparedPouchesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidatePreparedPouchesHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidatePreparedPouchesQueryKey(params);

  const validatePreparedPouches =  useValidatePreparedPouchesHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValidatePreparedPouchesHook>>>> = ({ signal }) => validatePreparedPouches(params, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useValidatePreparedPouchesHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

