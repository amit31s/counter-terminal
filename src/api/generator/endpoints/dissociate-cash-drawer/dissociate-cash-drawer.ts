/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * BBO Accounting Location Api
 * Accounting Location API defining how to get and modify Accounting Locations
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from 'react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  SuccessResponse,
  BadRequestResponse,
  UnauthorizedResponse,
  ForbiddenResponse,
  FailureResponseResponse,
  DissociateCashDrawerBodyBody,
  AssociateCashDrawerBodyBody
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * @summary Dissociate a Cash Drawer and Counter
 */
export const useDissociationCashDrawerHook = () => {
        const dissociationCashDrawer = useCustomInstance<SuccessResponse>();

        return (
    dissociateCashDrawerBodyBody: DissociateCashDrawerBodyBody,
 ) => {
        return dissociationCashDrawer(
          {url: `/v1/dissociation`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: dissociateCashDrawerBodyBody
    },
          );
        }
      }
    


    export type DissociationCashDrawerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDissociationCashDrawerHook>>>>
    export type DissociationCashDrawerMutationBody = DissociateCashDrawerBodyBody
    export type DissociationCashDrawerMutationError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

    export const useDissociationCashDrawer = <TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDissociationCashDrawerHook>>>, TError,{data: DissociateCashDrawerBodyBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const dissociationCashDrawer =  useDissociationCashDrawerHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDissociationCashDrawerHook>>>, {data: DissociateCashDrawerBodyBody}> = (props) => {
          const {data} = props ?? {};

          return  dissociationCashDrawer(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof dissociationCashDrawer>>, TError, {data: DissociateCashDrawerBodyBody}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * @summary (From Counter) Dissociate a Cash Drawer and Counter
 */
export const useDissociationCashDrawerCounterHook = () => {
        const dissociationCashDrawerCounter = useCustomInstance<SuccessResponse>();

        return (
    associateCashDrawerBodyBody: AssociateCashDrawerBodyBody,
 ) => {
        return dissociationCashDrawerCounter(
          {url: `/v1/dissociation-counter`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: associateCashDrawerBodyBody
    },
          );
        }
      }
    


    export type DissociationCashDrawerCounterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDissociationCashDrawerCounterHook>>>>
    export type DissociationCashDrawerCounterMutationBody = AssociateCashDrawerBodyBody
    export type DissociationCashDrawerCounterMutationError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

    export const useDissociationCashDrawerCounter = <TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDissociationCashDrawerCounterHook>>>, TError,{data: AssociateCashDrawerBodyBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const dissociationCashDrawerCounter =  useDissociationCashDrawerCounterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDissociationCashDrawerCounterHook>>>, {data: AssociateCashDrawerBodyBody}> = (props) => {
          const {data} = props ?? {};

          return  dissociationCashDrawerCounter(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof dissociationCashDrawerCounter>>, TError, {data: AssociateCashDrawerBodyBody}, TContext>(mutationFn, mutationOptions);
    }
    