/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * BBO Accounting Location Api
 * Accounting Location API defining how to get and modify Accounting Locations
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  AssociationUnAssociationListResponseResponse,
  BadRequestResponse,
  UnauthorizedResponse,
  ForbiddenResponse,
  FailureResponseResponse,
  GetAssociationUnassociationDetailsParams
} from '../../model'
import { useCustomInstance } from '../../mutator/useCustomInstance';
import type { ErrorType } from '../../mutator/useCustomInstance';


/**
 * @summary (From Counter) add summary
 */
export const useGetAssociationUnassociationDetailsHook = () => {
        const getAssociationUnassociationDetails = useCustomInstance<AssociationUnAssociationListResponseResponse>();

        return (
    params?: GetAssociationUnassociationDetailsParams,
 signal?: AbortSignal
) => {
        return getAssociationUnassociationDetails(
          {url: `/v1/association/details`, method: 'get',
        params, signal
    },
          );
        }
      }
    

export const getGetAssociationUnassociationDetailsQueryKey = (params?: GetAssociationUnassociationDetailsParams,) => [`/v1/association/details`, ...(params ? [params]: [])] as const;
  

    
export type GetAssociationUnassociationDetailsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAssociationUnassociationDetailsHook>>>>
export type GetAssociationUnassociationDetailsQueryError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>

export const useGetAssociationUnassociationDetails = <TData = Awaited<ReturnType<ReturnType<typeof useGetAssociationUnassociationDetailsHook>>>, TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | FailureResponseResponse>>(
 params?: GetAssociationUnassociationDetailsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAssociationUnassociationDetailsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssociationUnassociationDetailsQueryKey(params);

  const getAssociationUnassociationDetails =  useGetAssociationUnassociationDetailsHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAssociationUnassociationDetailsHook>>>> = ({ signal }) => getAssociationUnassociationDetails(params, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetAssociationUnassociationDetailsHook>>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

